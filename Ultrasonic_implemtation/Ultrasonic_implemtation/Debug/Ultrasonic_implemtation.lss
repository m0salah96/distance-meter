
Ultrasonic_implemtation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000598  0000062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006e  0080006e  0000063a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001563  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a96  00000000  00000000  00001d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae9  00000000  00000000  000027f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  000032dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069f  00000000  00000000  00003530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000968  00000000  00000000  00003bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004537  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b6 01 	call	0x36c	; 0x36c <main>
  8a:	0c 94 ca 02 	jmp	0x594	; 0x594 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Void_Init>:
		case DIO_U8_PORTD:
		return GetBit(PIND,DIO_U8_Pin);
		break;
	
}
}
  92:	8e ef       	ldi	r24, 0xFE	; 254
  94:	8a bb       	out	0x1a, r24	; 26
  96:	8e e0       	ldi	r24, 0x0E	; 14
  98:	87 bb       	out	0x17, r24	; 23
  9a:	8f e7       	ldi	r24, 0x7F	; 127
  9c:	84 bb       	out	0x14, r24	; 20
  9e:	81 eb       	ldi	r24, 0xB1	; 177
  a0:	81 bb       	out	0x11, r24	; 17
  a2:	08 95       	ret

000000a4 <DIO_Void_SetPin>:
  a4:	86 30       	cpi	r24, 0x06	; 6
  a6:	a1 f0       	breq	.+40     	; 0xd0 <DIO_Void_SetPin+0x2c>
  a8:	18 f4       	brcc	.+6      	; 0xb0 <DIO_Void_SetPin+0xc>
  aa:	85 30       	cpi	r24, 0x05	; 5
  ac:	31 f0       	breq	.+12     	; 0xba <DIO_Void_SetPin+0x16>
  ae:	08 95       	ret
  b0:	87 30       	cpi	r24, 0x07	; 7
  b2:	c9 f0       	breq	.+50     	; 0xe6 <DIO_Void_SetPin+0x42>
  b4:	88 30       	cpi	r24, 0x08	; 8
  b6:	11 f1       	breq	.+68     	; 0xfc <DIO_Void_SetPin+0x58>
  b8:	08 95       	ret
  ba:	2b b3       	in	r18, 0x1b	; 27
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_Void_SetPin+0x22>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_Void_SetPin+0x1e>
  ca:	82 2b       	or	r24, r18
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	08 95       	ret
  d0:	28 b3       	in	r18, 0x18	; 24
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_Void_SetPin+0x38>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_Void_SetPin+0x34>
  e0:	82 2b       	or	r24, r18
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	08 95       	ret
  e6:	25 b3       	in	r18, 0x15	; 21
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_Void_SetPin+0x4e>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_Void_SetPin+0x4a>
  f6:	82 2b       	or	r24, r18
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	08 95       	ret
  fc:	22 b3       	in	r18, 0x12	; 18
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_Void_SetPin+0x64>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_Void_SetPin+0x60>
 10c:	82 2b       	or	r24, r18
 10e:	82 bb       	out	0x12, r24	; 18
 110:	08 95       	ret

00000112 <DIO_Void_ClearPin>:
 112:	86 30       	cpi	r24, 0x06	; 6
 114:	a9 f0       	breq	.+42     	; 0x140 <DIO_Void_ClearPin+0x2e>
 116:	18 f4       	brcc	.+6      	; 0x11e <DIO_Void_ClearPin+0xc>
 118:	85 30       	cpi	r24, 0x05	; 5
 11a:	31 f0       	breq	.+12     	; 0x128 <DIO_Void_ClearPin+0x16>
 11c:	08 95       	ret
 11e:	87 30       	cpi	r24, 0x07	; 7
 120:	d9 f0       	breq	.+54     	; 0x158 <DIO_Void_ClearPin+0x46>
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	29 f1       	breq	.+74     	; 0x170 <DIO_Void_ClearPin+0x5e>
 126:	08 95       	ret
 128:	2b b3       	in	r18, 0x1b	; 27
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_Void_ClearPin+0x22>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_Void_ClearPin+0x1e>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	8b bb       	out	0x1b, r24	; 27
 13e:	08 95       	ret
 140:	28 b3       	in	r18, 0x18	; 24
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_Void_ClearPin+0x3a>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_Void_ClearPin+0x36>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	88 bb       	out	0x18, r24	; 24
 156:	08 95       	ret
 158:	25 b3       	in	r18, 0x15	; 21
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_Void_ClearPin+0x52>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_Void_ClearPin+0x4e>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	08 95       	ret
 170:	22 b3       	in	r18, 0x12	; 18
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_Void_ClearPin+0x6a>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_Void_ClearPin+0x66>
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	82 bb       	out	0x12, r24	; 18
 186:	08 95       	ret

00000188 <DIO_VoidSetPortValue>:
/**************************************************/
void DIO_VoidSetPortValue(u8 DIO_U8_PORT, u8 DIO_U8_Val){
	
	switch(DIO_U8_PORT){
 188:	86 30       	cpi	r24, 0x06	; 6
 18a:	59 f0       	breq	.+22     	; 0x1a2 <DIO_VoidSetPortValue+0x1a>
 18c:	18 f4       	brcc	.+6      	; 0x194 <DIO_VoidSetPortValue+0xc>
 18e:	85 30       	cpi	r24, 0x05	; 5
 190:	31 f0       	breq	.+12     	; 0x19e <DIO_VoidSetPortValue+0x16>
 192:	08 95       	ret
 194:	87 30       	cpi	r24, 0x07	; 7
 196:	39 f0       	breq	.+14     	; 0x1a6 <DIO_VoidSetPortValue+0x1e>
 198:	88 30       	cpi	r24, 0x08	; 8
 19a:	39 f0       	breq	.+14     	; 0x1aa <DIO_VoidSetPortValue+0x22>
 19c:	08 95       	ret
		case DIO_U8_PORTA:
	    PORTA=DIO_U8_Val;
 19e:	6b bb       	out	0x1b, r22	; 27
		break;
 1a0:	08 95       	ret
		case DIO_U8_PORTB:
	    PORTB=DIO_U8_Val;
 1a2:	68 bb       	out	0x18, r22	; 24
		break;
 1a4:	08 95       	ret
		case DIO_U8_PORTC:
		PORTC=DIO_U8_Val;
 1a6:	65 bb       	out	0x15, r22	; 21
		break;
 1a8:	08 95       	ret
		case DIO_U8_PORTD:
		PORTD=DIO_U8_Val;
 1aa:	62 bb       	out	0x12, r22	; 18
 1ac:	08 95       	ret

000001ae <LCD_voidSendData>:



void LCD_voidClearScreen(void)
{
	LCD_voidSendCommand(0b00000001);
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_Void_SetPin>
 1ba:	62 e0       	ldi	r22, 0x02	; 2
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	0e 94 89 00 	call	0x112	; 0x112 <DIO_Void_ClearPin>
 1c2:	6c 2f       	mov	r22, r28
 1c4:	60 7f       	andi	r22, 0xF0	; 240
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_VoidSetPortValue>
 1cc:	63 e0       	ldi	r22, 0x03	; 3
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_Void_SetPin>
 1d4:	8f e9       	ldi	r24, 0x9F	; 159
 1d6:	9f e0       	ldi	r25, 0x0F	; 15
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCD_voidSendData+0x2a>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <LCD_voidSendData+0x30>
 1de:	00 00       	nop
 1e0:	63 e0       	ldi	r22, 0x03	; 3
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	0e 94 89 00 	call	0x112	; 0x112 <DIO_Void_ClearPin>
 1e8:	8f e9       	ldi	r24, 0x9F	; 159
 1ea:	9f e0       	ldi	r25, 0x0F	; 15
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_voidSendData+0x3e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_voidSendData+0x44>
 1f2:	00 00       	nop
 1f4:	6c 2f       	mov	r22, r28
 1f6:	62 95       	swap	r22
 1f8:	60 7f       	andi	r22, 0xF0	; 240
 1fa:	85 e0       	ldi	r24, 0x05	; 5
 1fc:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_VoidSetPortValue>
 200:	63 e0       	ldi	r22, 0x03	; 3
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_Void_SetPin>
 208:	8f e9       	ldi	r24, 0x9F	; 159
 20a:	9f e0       	ldi	r25, 0x0F	; 15
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <LCD_voidSendData+0x5e>
 210:	00 c0       	rjmp	.+0      	; 0x212 <LCD_voidSendData+0x64>
 212:	00 00       	nop
 214:	63 e0       	ldi	r22, 0x03	; 3
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	0e 94 89 00 	call	0x112	; 0x112 <DIO_Void_ClearPin>
 21c:	8f e9       	ldi	r24, 0x9F	; 159
 21e:	9f e0       	ldi	r25, 0x0F	; 15
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCD_voidSendData+0x72>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_voidSendData+0x78>
 226:	00 00       	nop
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <LCD_voidSendCommand>:
 22c:	cf 93       	push	r28
 22e:	c8 2f       	mov	r28, r24
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	0e 94 89 00 	call	0x112	; 0x112 <DIO_Void_ClearPin>
 238:	62 e0       	ldi	r22, 0x02	; 2
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	0e 94 89 00 	call	0x112	; 0x112 <DIO_Void_ClearPin>
 240:	6c 2f       	mov	r22, r28
 242:	60 7f       	andi	r22, 0xF0	; 240
 244:	85 e0       	ldi	r24, 0x05	; 5
 246:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_VoidSetPortValue>
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_Void_SetPin>
 252:	8f e9       	ldi	r24, 0x9F	; 159
 254:	9f e0       	ldi	r25, 0x0F	; 15
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCD_voidSendCommand+0x2a>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <LCD_voidSendCommand+0x30>
 25c:	00 00       	nop
 25e:	63 e0       	ldi	r22, 0x03	; 3
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	0e 94 89 00 	call	0x112	; 0x112 <DIO_Void_ClearPin>
 266:	8f e9       	ldi	r24, 0x9F	; 159
 268:	9f e0       	ldi	r25, 0x0F	; 15
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_voidSendCommand+0x3e>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_voidSendCommand+0x44>
 270:	00 00       	nop
 272:	6c 2f       	mov	r22, r28
 274:	62 95       	swap	r22
 276:	60 7f       	andi	r22, 0xF0	; 240
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_VoidSetPortValue>
 27e:	63 e0       	ldi	r22, 0x03	; 3
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_Void_SetPin>
 286:	8f e9       	ldi	r24, 0x9F	; 159
 288:	9f e0       	ldi	r25, 0x0F	; 15
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <LCD_voidSendCommand+0x5e>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LCD_voidSendCommand+0x64>
 290:	00 00       	nop
 292:	63 e0       	ldi	r22, 0x03	; 3
 294:	86 e0       	ldi	r24, 0x06	; 6
 296:	0e 94 89 00 	call	0x112	; 0x112 <DIO_Void_ClearPin>
 29a:	8f e9       	ldi	r24, 0x9F	; 159
 29c:	9f e0       	ldi	r25, 0x0F	; 15
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_voidSendCommand+0x72>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_voidSendCommand+0x78>
 2a4:	00 00       	nop
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <LCD_Void_Init>:
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	89 ef       	ldi	r24, 0xF9	; 249
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <LCD_Void_Init+0x6>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCD_Void_Init+0x10>
 2ba:	00 00       	nop
 2bc:	83 e3       	ldi	r24, 0x33	; 51
 2be:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_voidSendCommand>
 2c2:	82 e3       	ldi	r24, 0x32	; 50
 2c4:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_voidSendCommand>
 2c8:	88 e2       	ldi	r24, 0x28	; 40
 2ca:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_voidSendCommand>
 2ce:	8c e0       	ldi	r24, 0x0C	; 12
 2d0:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_voidSendCommand>
 2d4:	86 e0       	ldi	r24, 0x06	; 6
 2d6:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_voidSendCommand>
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_voidSendCommand>
 2e0:	08 95       	ret

000002e2 <LCD_voidSendString>:
}

void LCD_voidSendString(u8* Local_u8Data)///how 
{
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	8c 01       	movw	r16, r24
	u8 Local_u8Index = 0;
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
	while(Local_u8Data[Local_u8Index] != '\0')
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <LCD_voidSendString+0x12>
	{
		LCD_voidSendData(Local_u8Data[Local_u8Index]);
 2ee:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_voidSendData>
		Local_u8Index++;
 2f2:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_voidSendString(u8* Local_u8Data)///how 
{
	u8 Local_u8Index = 0;
	while(Local_u8Data[Local_u8Index] != '\0')
 2f4:	f8 01       	movw	r30, r16
 2f6:	ec 0f       	add	r30, r28
 2f8:	f1 1d       	adc	r31, r1
 2fa:	80 81       	ld	r24, Z
 2fc:	81 11       	cpse	r24, r1
 2fe:	f7 cf       	rjmp	.-18     	; 0x2ee <LCD_voidSendString+0xc>
	{
		LCD_voidSendData(Local_u8Data[Local_u8Index]);
		Local_u8Index++;
	}
}
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <LCD_Display_Number>:

void LCD_Display_Number(u16 Local_u32Data){
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	2a 97       	sbiw	r28, 0x0a	; 10
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 31c:	4a e0       	ldi	r20, 0x0A	; 10
 31e:	be 01       	movw	r22, r28
 320:	6f 5f       	subi	r22, 0xFF	; 255
 322:	7f 4f       	sbci	r23, 0xFF	; 255
 324:	0e 94 95 02 	call	0x52a	; 0x52a <__itoa_ncheck>
	
	 u8 Arr_String [10];
	itoa(Local_u32Data,Arr_String,10);
	
   LCD_voidSendString(Arr_String);
 328:	ce 01       	movw	r24, r28
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_voidSendString>
	
}
 330:	2a 96       	adiw	r28, 0x0a	; 10
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <LCD_voidSetCursor>:


void LCD_voidSetCursor(u8 Local_u8Row , u8 Local_u8Column)
{
	u8 Local_u8Address=0x00;
	switch(Local_u8Row)
 342:	88 23       	and	r24, r24
 344:	19 f0       	breq	.+6      	; 0x34c <LCD_voidSetCursor+0xa>
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	21 f0       	breq	.+8      	; 0x352 <LCD_voidSetCursor+0x10>
 34a:	06 c0       	rjmp	.+12     	; 0x358 <LCD_voidSetCursor+0x16>
	{
		case 0: 
			Local_u8Address = 0x80 + Local_u8Column;
 34c:	80 e8       	ldi	r24, 0x80	; 128
 34e:	86 0f       	add	r24, r22
			break;
 350:	04 c0       	rjmp	.+8      	; 0x35a <LCD_voidSetCursor+0x18>
		case 1:
			Local_u8Address = 0x80 + 0x40 + Local_u8Column;
 352:	80 ec       	ldi	r24, 0xC0	; 192
 354:	86 0f       	add	r24, r22
			break;
 356:	01 c0       	rjmp	.+2      	; 0x35a <LCD_voidSetCursor+0x18>
}


void LCD_voidSetCursor(u8 Local_u8Row , u8 Local_u8Column)
{
	u8 Local_u8Address=0x00;
 358:	80 e0       	ldi	r24, 0x00	; 0
		case 1:
			Local_u8Address = 0x80 + 0x40 + Local_u8Column;
			break;
	}
	
	LCD_voidSendCommand(Local_u8Address);
 35a:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35e:	8f e9       	ldi	r24, 0x9F	; 159
 360:	9f e0       	ldi	r25, 0x0F	; 15
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <LCD_voidSetCursor+0x20>
 366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_voidSetCursor+0x26>
 368:	00 00       	nop
 36a:	08 95       	ret

0000036c <main>:

int main(void)
{


DIO_Void_Init();
 36c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Void_Init>
LCD_Void_Init();
 370:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Void_Init>
Timer1_Init();
 374:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Timer1_Init>

LCD_voidSendString("Distance =");
 378:	80 e6       	ldi	r24, 0x60	; 96
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_voidSendString>
	

u32 x;
    while (1) 
    {    LCD_voidSetCursor(1,1);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_voidSetCursor>
	    LCD_voidSendString("cm");
 388:	8b e6       	ldi	r24, 0x6B	; 107
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_voidSendString>
		x=Ultrasonic_GetDistance();
 390:	0e 94 0c 02 	call	0x418	; 0x418 <Ultrasonic_GetDistance>
 394:	6b 01       	movw	r12, r22
 396:	7c 01       	movw	r14, r24
		LCD_voidSetCursor(1,0);
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_voidSetCursor>
		LCD_Display_Number(x);
 3a0:	c6 01       	movw	r24, r12
 3a2:	0e 94 84 01 	call	0x308	; 0x308 <LCD_Display_Number>
 3a6:	2f ef       	ldi	r18, 0xFF	; 255
 3a8:	83 ec       	ldi	r24, 0xC3	; 195
 3aa:	99 e0       	ldi	r25, 0x09	; 9
 3ac:	21 50       	subi	r18, 0x01	; 1
 3ae:	80 40       	sbci	r24, 0x00	; 0
 3b0:	90 40       	sbci	r25, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x40>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x4a>
 3b6:	00 00       	nop
 3b8:	e3 cf       	rjmp	.-58     	; 0x380 <main+0x14>

000003ba <Timer1_Init>:

void Timer1_Stop(){
	//no clock
ClearBit(TCCR1B,CS12);
ClearBit(TCCR1B,CS11);
ClearBit(TCCR1B,CS10) ;	
 3ba:	8f b5       	in	r24, 0x2f	; 47
 3bc:	8f 7e       	andi	r24, 0xEF	; 239
 3be:	8f bd       	out	0x2f, r24	; 47
 3c0:	8f b5       	in	r24, 0x2f	; 47
 3c2:	87 7f       	andi	r24, 0xF7	; 247
 3c4:	8f bd       	out	0x2f, r24	; 47
 3c6:	8f b5       	in	r24, 0x2f	; 47
 3c8:	8d 7f       	andi	r24, 0xFD	; 253
 3ca:	8f bd       	out	0x2f, r24	; 47
 3cc:	8f b5       	in	r24, 0x2f	; 47
 3ce:	8e 7f       	andi	r24, 0xFE	; 254
 3d0:	8f bd       	out	0x2f, r24	; 47
 3d2:	8f b5       	in	r24, 0x2f	; 47
 3d4:	8f 77       	andi	r24, 0x7F	; 127
 3d6:	8f bd       	out	0x2f, r24	; 47
 3d8:	8f b5       	in	r24, 0x2f	; 47
 3da:	8f 7b       	andi	r24, 0xBF	; 191
 3dc:	8f bd       	out	0x2f, r24	; 47
 3de:	8f b5       	in	r24, 0x2f	; 47
 3e0:	8f 7d       	andi	r24, 0xDF	; 223
 3e2:	8f bd       	out	0x2f, r24	; 47
 3e4:	8f b5       	in	r24, 0x2f	; 47
 3e6:	8f 7e       	andi	r24, 0xEF	; 239
 3e8:	8f bd       	out	0x2f, r24	; 47
 3ea:	8f b5       	in	r24, 0x2f	; 47
 3ec:	87 7f       	andi	r24, 0xF7	; 247
 3ee:	8f bd       	out	0x2f, r24	; 47
 3f0:	8f b5       	in	r24, 0x2f	; 47
 3f2:	8b 7f       	andi	r24, 0xFB	; 251
 3f4:	8f bd       	out	0x2f, r24	; 47
 3f6:	8e b5       	in	r24, 0x2e	; 46
 3f8:	80 64       	ori	r24, 0x40	; 64
 3fa:	8e bd       	out	0x2e, r24	; 46
 3fc:	08 95       	ret

000003fe <Timer1_Start>:
 3fe:	8e b5       	in	r24, 0x2e	; 46
 400:	8b 7f       	andi	r24, 0xFB	; 251
 402:	8e bd       	out	0x2e, r24	; 46
 404:	8e b5       	in	r24, 0x2e	; 46
 406:	82 60       	ori	r24, 0x02	; 2
 408:	8e bd       	out	0x2e, r24	; 46
 40a:	8e b5       	in	r24, 0x2e	; 46
 40c:	8e 7f       	andi	r24, 0xFE	; 254
 40e:	8e bd       	out	0x2e, r24	; 46
 410:	08 95       	ret

00000412 <Timer1_Reset>:



void Timer1_Reset(){
	
TCNT1=0;
 412:	1d bc       	out	0x2d, r1	; 45
 414:	1c bc       	out	0x2c, r1	; 44
 416:	08 95       	ret

00000418 <Ultrasonic_GetDistance>:
  u32 Ultrasonic_GetDistance(){
	  
	  u32 time_measured;
	  u32  distance;
	 //	Enable Interrupt
	 sei();
 418:	78 94       	sei
	 SetBit(TIMSK,TOIE1);
 41a:	89 b7       	in	r24, 0x39	; 57
 41c:	84 60       	ori	r24, 0x04	; 4
 41e:	89 bf       	out	0x39, r24	; 57
	//Initialize timer pre-scaler
	Timer1_Start();
 420:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Timer1_Start>
	 //ICU Rising edge
	 SetBit(TCCR1B,ICES1);
 424:	8e b5       	in	r24, 0x2e	; 46
 426:	80 64       	ori	r24, 0x40	; 64
 428:	8e bd       	out	0x2e, r24	; 46
	 //reset flag
	 SetBit(TIFR,ICF1);
 42a:	88 b7       	in	r24, 0x38	; 56
 42c:	80 62       	ori	r24, 0x20	; 32
 42e:	88 bf       	out	0x38, r24	; 56
		//zero o.v. flag
		Timer1_Reset();
 430:	0e 94 09 02 	call	0x412	; 0x412 <Timer1_Reset>
		no_OVF=0;
 434:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
	//trigger pulse 
	DIO_Void_SetPin(Ultra_Sonic_Trigger_PORT,Ultra_Sonic_Trigger_PIN);  
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	87 e0       	ldi	r24, 0x07	; 7
 43c:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_Void_SetPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 440:	6a e6       	ldi	r22, 0x6A	; 106
 442:	6a 95       	dec	r22
 444:	f1 f7       	brne	.-4      	; 0x442 <Ultrasonic_GetDistance+0x2a>
 446:	00 c0       	rjmp	.+0      	; 0x448 <Ultrasonic_GetDistance+0x30>
	_delay_us(20);  
	DIO_Void_ClearPin(Ultra_Sonic_Trigger_PORT,Ultra_Sonic_Trigger_PIN); 
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	87 e0       	ldi	r24, 0x07	; 7
 44c:	0e 94 89 00 	call	0x112	; 0x112 <DIO_Void_ClearPin>
	//wait for echo set
	while(GetBit(TIFR,ICF1)==0);
 450:	08 b6       	in	r0, 0x38	; 56
 452:	05 fe       	sbrs	r0, 5
 454:	fd cf       	rjmp	.-6      	; 0x450 <Ultrasonic_GetDistance+0x38>

	//reset flag
	SetBit(TIFR,ICF1);
 456:	88 b7       	in	r24, 0x38	; 56
 458:	80 62       	ori	r24, 0x20	; 32
 45a:	88 bf       	out	0x38, r24	; 56

	 //ICU Falling edge
	 ClearBit(TCCR1B,ICES1);	  
 45c:	8e b5       	in	r24, 0x2e	; 46
 45e:	8f 7b       	andi	r24, 0xBF	; 191
 460:	8e bd       	out	0x2e, r24	; 46
     //wait for capture 
     while(GetBit(TIFR,ICF1)==0);
 462:	08 b6       	in	r0, 0x38	; 56
 464:	05 fe       	sbrs	r0, 5
 466:	fd cf       	rjmp	.-6      	; 0x462 <Ultrasonic_GetDistance+0x4a>
     time_measured=ICR1+no_OVF*65535;
 468:	46 b5       	in	r20, 0x26	; 38
 46a:	57 b5       	in	r21, 0x27	; 39
 46c:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <__data_end>
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	af ef       	ldi	r26, 0xFF	; 255
 474:	bf ef       	ldi	r27, 0xFF	; 255
 476:	0e 94 86 02 	call	0x50c	; 0x50c <__umulhisi3>
 47a:	64 0f       	add	r22, r20
 47c:	75 1f       	adc	r23, r21
 47e:	81 1d       	adc	r24, r1
 480:	91 1d       	adc	r25, r1
     distance=time_measured/115;
 482:	23 e7       	ldi	r18, 0x73	; 115
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__udivmodsi4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	90 e7       	ldi	r25, 0x70	; 112
 492:	62 e0       	ldi	r22, 0x02	; 2
 494:	81 50       	subi	r24, 0x01	; 1
 496:	90 40       	sbci	r25, 0x00	; 0
 498:	60 40       	sbci	r22, 0x00	; 0
 49a:	e1 f7       	brne	.-8      	; 0x494 <Ultrasonic_GetDistance+0x7c>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <Ultrasonic_GetDistance+0x86>
 49e:	00 00       	nop
     _delay_ms(50);
      return distance;
  
  }
 4a0:	ca 01       	movw	r24, r20
 4a2:	b9 01       	movw	r22, r18
 4a4:	08 95       	ret

000004a6 <__vector_9>:

ISR(TIMER1_OVF_vect){
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	8f 93       	push	r24

no_OVF++;
 4b2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 4b6:	8f 5f       	subi	r24, 0xFF	; 255
 4b8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>

}
 4bc:	8f 91       	pop	r24
 4be:	0f 90       	pop	r0
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	0f 90       	pop	r0
 4c4:	1f 90       	pop	r1
 4c6:	18 95       	reti

000004c8 <__udivmodsi4>:
 4c8:	a1 e2       	ldi	r26, 0x21	; 33
 4ca:	1a 2e       	mov	r1, r26
 4cc:	aa 1b       	sub	r26, r26
 4ce:	bb 1b       	sub	r27, r27
 4d0:	fd 01       	movw	r30, r26
 4d2:	0d c0       	rjmp	.+26     	; 0x4ee <__udivmodsi4_ep>

000004d4 <__udivmodsi4_loop>:
 4d4:	aa 1f       	adc	r26, r26
 4d6:	bb 1f       	adc	r27, r27
 4d8:	ee 1f       	adc	r30, r30
 4da:	ff 1f       	adc	r31, r31
 4dc:	a2 17       	cp	r26, r18
 4de:	b3 07       	cpc	r27, r19
 4e0:	e4 07       	cpc	r30, r20
 4e2:	f5 07       	cpc	r31, r21
 4e4:	20 f0       	brcs	.+8      	; 0x4ee <__udivmodsi4_ep>
 4e6:	a2 1b       	sub	r26, r18
 4e8:	b3 0b       	sbc	r27, r19
 4ea:	e4 0b       	sbc	r30, r20
 4ec:	f5 0b       	sbc	r31, r21

000004ee <__udivmodsi4_ep>:
 4ee:	66 1f       	adc	r22, r22
 4f0:	77 1f       	adc	r23, r23
 4f2:	88 1f       	adc	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	1a 94       	dec	r1
 4f8:	69 f7       	brne	.-38     	; 0x4d4 <__udivmodsi4_loop>
 4fa:	60 95       	com	r22
 4fc:	70 95       	com	r23
 4fe:	80 95       	com	r24
 500:	90 95       	com	r25
 502:	9b 01       	movw	r18, r22
 504:	ac 01       	movw	r20, r24
 506:	bd 01       	movw	r22, r26
 508:	cf 01       	movw	r24, r30
 50a:	08 95       	ret

0000050c <__umulhisi3>:
 50c:	a2 9f       	mul	r26, r18
 50e:	b0 01       	movw	r22, r0
 510:	b3 9f       	mul	r27, r19
 512:	c0 01       	movw	r24, r0
 514:	a3 9f       	mul	r26, r19
 516:	70 0d       	add	r23, r0
 518:	81 1d       	adc	r24, r1
 51a:	11 24       	eor	r1, r1
 51c:	91 1d       	adc	r25, r1
 51e:	b2 9f       	mul	r27, r18
 520:	70 0d       	add	r23, r0
 522:	81 1d       	adc	r24, r1
 524:	11 24       	eor	r1, r1
 526:	91 1d       	adc	r25, r1
 528:	08 95       	ret

0000052a <__itoa_ncheck>:
 52a:	bb 27       	eor	r27, r27
 52c:	4a 30       	cpi	r20, 0x0A	; 10
 52e:	31 f4       	brne	.+12     	; 0x53c <__itoa_ncheck+0x12>
 530:	99 23       	and	r25, r25
 532:	22 f4       	brpl	.+8      	; 0x53c <__itoa_ncheck+0x12>
 534:	bd e2       	ldi	r27, 0x2D	; 45
 536:	90 95       	com	r25
 538:	81 95       	neg	r24
 53a:	9f 4f       	sbci	r25, 0xFF	; 255
 53c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__utoa_common>

00000540 <__utoa_ncheck>:
 540:	bb 27       	eor	r27, r27

00000542 <__utoa_common>:
 542:	fb 01       	movw	r30, r22
 544:	55 27       	eor	r21, r21
 546:	aa 27       	eor	r26, r26
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	aa 1f       	adc	r26, r26
 54e:	a4 17       	cp	r26, r20
 550:	10 f0       	brcs	.+4      	; 0x556 <__utoa_common+0x14>
 552:	a4 1b       	sub	r26, r20
 554:	83 95       	inc	r24
 556:	50 51       	subi	r21, 0x10	; 16
 558:	b9 f7       	brne	.-18     	; 0x548 <__utoa_common+0x6>
 55a:	a0 5d       	subi	r26, 0xD0	; 208
 55c:	aa 33       	cpi	r26, 0x3A	; 58
 55e:	08 f0       	brcs	.+2      	; 0x562 <__utoa_common+0x20>
 560:	a9 5d       	subi	r26, 0xD9	; 217
 562:	a1 93       	st	Z+, r26
 564:	00 97       	sbiw	r24, 0x00	; 0
 566:	79 f7       	brne	.-34     	; 0x546 <__utoa_common+0x4>
 568:	b1 11       	cpse	r27, r1
 56a:	b1 93       	st	Z+, r27
 56c:	11 92       	st	Z+, r1
 56e:	cb 01       	movw	r24, r22
 570:	0c 94 ba 02 	jmp	0x574	; 0x574 <strrev>

00000574 <strrev>:
 574:	dc 01       	movw	r26, r24
 576:	fc 01       	movw	r30, r24
 578:	67 2f       	mov	r22, r23
 57a:	71 91       	ld	r23, Z+
 57c:	77 23       	and	r23, r23
 57e:	e1 f7       	brne	.-8      	; 0x578 <strrev+0x4>
 580:	32 97       	sbiw	r30, 0x02	; 2
 582:	04 c0       	rjmp	.+8      	; 0x58c <strrev+0x18>
 584:	7c 91       	ld	r23, X
 586:	6d 93       	st	X+, r22
 588:	70 83       	st	Z, r23
 58a:	62 91       	ld	r22, -Z
 58c:	ae 17       	cp	r26, r30
 58e:	bf 07       	cpc	r27, r31
 590:	c8 f3       	brcs	.-14     	; 0x584 <strrev+0x10>
 592:	08 95       	ret

00000594 <_exit>:
 594:	f8 94       	cli

00000596 <__stop_program>:
 596:	ff cf       	rjmp	.-2      	; 0x596 <__stop_program>
